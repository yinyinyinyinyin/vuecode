1.组件的属性
vue实例的属性和组件的属性，大多是一样的，
不同点：
props
data:function(){      ****
	return {
		
	}
}
2.props 
	a.可以写成数组方式  *****
	props:["yin1","list"]
	b.对象形式，可以验证类型是否正确
	可以验证的类型有：Array，Object，String，Number，Boolean，Function
	props:{
		"myname":String,
		"basenum":Number
	}
	c.其他验证
	props:{
		"name":{
			type:String,
			required:true //必填
		},
		"num":{
			type:Number,
			default:100  //默认值
		},
	}
	
3.组件的传参    *****
	注意：组件传参是单向的，默认只能父传子；如果子传父，必须使用 $emit去触发自定义事件  *****
	

		a.父传子：
			在父组件上调用子组件时使用 v-bind:绑定 变量值，在子组件中使用  props接收参数  *****
		3.调用组件
			<baseline  :line="line"></baseline>
			1.定义组件
			var baseline={
				props:["line"],
				template:`<div>line的子组件</div>`
			}
			var vm = new Vue({
				el:'#app',
				data:{
					line:'hello'
				},
				components:{baseline} //2.注册组件
			})
		
		b.子传父
			$emit  自动触发一个 自定义事件    *****
			<baseline  :line="line" @myclick="changetype"></baseline>
			1.定义组件
			var baseline={
				props:["line"],
				template:`<div>line的子组件
				<botton @click="changeF">点击</button>
				</div>`,
				methods:{
					changeF:function(){
						//触发一个 自定义事件
						//参数：自定义的事件名，要传到父组件的参数值
						$emit('myclick',      'hello world');
					}
				}
			}
			var vm = new Vue({
				el:'#app',
				data:{
					line:'hello'
				},
				components:{baseline}, //2.注册组件
				methods:{
					changetype:function(data){
						//从子组件传过来的参数
						console.log(data);
					}
				}
			})
			
			
4. .sync 是一个语法糖，对组件的双向绑定写法更方便
 		<child :is-show.sync="isShow" v-show="isShow"></child>	
		<child @update:is-show="bol=>isShow=bol" v-show="isShow"></child>	
		
5. .native 将原生事件绑定到组件上		

6.  自定义组件中使用 v-model

7.  默认插槽  <slot></slot>    ***
写在子组件中

在调用子组件时，子组件包含的内容可以解析到  <slot></slot>标签所在的位置